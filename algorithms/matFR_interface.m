function [r] = matFR_interface(X, f, Y)
% -------------------------------------------------------------------------
% Zhicheng Zhang, Xiaokun Liang, Shaode Yu, Yaoqin Xie
% June 3, 2020
% Email: yushaodemia@163.com
%   An interface function between user input and activated algorithms
% -------------------------------------------------------------------------
% if the matFR toolbox is useful, please refer to
%       Zhang, Zhicheng, et al. "matFR: a matlab toolbox for feature ranking"
% -------------------------------------------------------------------------
% Inputs
%       X,      a matrix shows samples and their features
%                   its size [m, n] indicates m samples and n featuers per sample
%       f,      a feature selection method
%       Y,      the corresponding labels to each samples
%                   its size [m, 1] and the Y values are in {0, 1}
%
% Output
%       r,      the feature ranks from the most to the least importance
%                   its size [1, n]
% -------------------------------------------------------------------------
% (0) to check the input parameters
flag = 0; % a flag for supervised methods
if nargin < 3
    fprintf('WARNING: An unsupervised learning method ...\n');
    flag = 1; % unsupervised
end

if nargin < 2
    f = 'h2_fir_laplacian_score';
end

% -------------------------------------------------------------------------
% (1) to list all methods integrated
miFRmethod = {  'a1_mi_battiti', 'a2_mi_step_wise', ...
                'b1_mi_cond_infomax_learn', ...
                'b2_mi_cond_mutual_info_max', ...
                'b3_mi_mrmr_global', ...
                'b4_mi_max_relevance', ...
                'b5_mi_min_redundancy', ...
                'b6_mi_max_dep_max_rel_min_red', ...
                'b7_mi_quad_program', ...
                'b8_mi_min_redundancy', ...
                'b9_mi_joint', ...
                'c1_mi_giorgio'}; % 12 MI based methods
            
fnFRmethod = {  'd1_mat_ttest', 'd2_mat_entropy', ...
                'd3_mat_bhattacharyya', 'd4_mat_roc', ...
                'd5_mat_wilcoxon', 'd6_mat_relieff', ...
                'd7_mat_lasso', 'e1_fir_correlation', ...
                'e2_fir_fisher', 'e3_fir_gini', ...
                'e4_fir_KruskalWallis', ...
                'g1_fir_pair_wise_feature_proximity',...
                'g2_fir_max_min_local_structure_info', ...
                'g3_fir_local_learning_clustering', ...
                'g4_fir_L12_regu_discrime', 'g5_fir_eigenvector_centrality', ...
                'g6_fir_infinite_latent', 'g7_fir_concave_minimization', ...
                'g8_fir_infinite', 'g9_fir_ordinal_locality', ...
                'h1_fir_structured_graph_optimization', ...
                'h2_fir_laplacian_score', 'h3_fir_simul_ortho_clustering', ...
                'h4_fir_multi_cluster', 'h5_fir_dependence_guided', ...
                'h6_fir_adaptive_structure_learning', ...
                'k1_fir_joint_embed_learn_sparse_regression', ...
                'k2_fir_spectrum_info_graph_laplacian', ...
                'k3_fir_nonneg_spectral_analysis', ...
                'k4_fir_robust_unsupervised'}; % 30 methods

% -------------------------------------------------------------------------
% (2) to run a FR method

if sum( double(ismember(miFRmethod, f)) ) % a MI based FR method
    if 1 == flag
        r = matFR_mi( X, f ); % an unsupervised method
    else
        r = matFR_mi( X, f, Y );
    end
elseif sum( double(ismember(fnFRmethod, f)) ) % a FR method, but not MI
    if 1 == flag
        r = matFR_fn( X, f ); % an unsupervised method
    else
        r = matFR_fn( X, f, Y );
    end
else
    fprintf('ERROR: unseen FR method ...\n');
    r = [];
end
end

